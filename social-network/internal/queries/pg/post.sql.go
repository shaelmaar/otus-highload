// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post.sql

package pg

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const postCreate = `-- name: PostCreate :exec
insert into post(id, content, author_user_id, created_at)
values ($1, $2, $3, $4)
`

type PostCreateParams struct {
	ID           uuid.UUID
	Content      string
	AuthorUserID uuid.UUID
	CreatedAt    time.Time
}

func (q *Queries) PostCreate(ctx context.Context, arg PostCreateParams) error {
	_, err := q.db.Exec(ctx, postCreate,
		arg.ID,
		arg.Content,
		arg.AuthorUserID,
		arg.CreatedAt,
	)
	return err
}

const postDelete = `-- name: PostDelete :exec
delete
from post
where id = $1
`

func (q *Queries) PostDelete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, postDelete, id)
	return err
}

const postGetByID = `-- name: PostGetByID :one
select id, content, author_user_id, created_at, updated_at
from post
where id = $1
`

func (q *Queries) PostGetByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, postGetByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.AuthorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const postGetWithLockByID = `-- name: PostGetWithLockByID :one
select id, content, author_user_id, created_at, updated_at
from post
where id = $1
for no key update
`

func (q *Queries) PostGetWithLockByID(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRow(ctx, postGetWithLockByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.AuthorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const postUpdate = `-- name: PostUpdate :exec
update post
set content = $1,
    updated_at = $2
where id = $3
`

type PostUpdateParams struct {
	Content   string
	UpdatedAt pgtype.Timestamptz
	ID        uuid.UUID
}

func (q *Queries) PostUpdate(ctx context.Context, arg PostUpdateParams) error {
	_, err := q.db.Exec(ctx, postUpdate, arg.Content, arg.UpdatedAt, arg.ID)
	return err
}
