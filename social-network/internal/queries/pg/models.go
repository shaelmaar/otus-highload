// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package pg

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// Пол:
// * male          - мужской.
// * female        - женский.
type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type LoadTest struct {
	ID    uuid.UUID
	Value string
}

// посты пользователей
type Post struct {
	// идентификатор поста
	ID uuid.UUID
	// содержимое поста
	Content string
	// идентификатор пользователя автора поста
	AuthorUserID uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    pgtype.Timestamptz
}

// Пользователь
type User struct {
	ID uuid.UUID
	// Хэш пароля
	PasswordHash string
	// Имя
	FirstName string
	// Фамилия
	SecondName string
	// Дата рождения
	BirthDate pgtype.Date
	// Пол
	Gender Gender
	// Хобби, интересы и т.п.
	Biography string
	// Город
	City      string
	CreatedAt time.Time
	UpdatedAt pgtype.Timestamptz
}
