// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package pg

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const userCreate = `-- name: UserCreate :exec
insert into "user"(id, password_hash, first_name, second_name,
                   birth_date, gender, biography, city)
values ( $1, $2, $3, $4,
         $5, $6, $7, $8)
`

type UserCreateParams struct {
	ID           uuid.UUID
	PasswordHash string
	FirstName    string
	SecondName   string
	BirthDate    pgtype.Date
	Gender       Gender
	Biography    string
	City         string
}

func (q *Queries) UserCreate(ctx context.Context, arg UserCreateParams) error {
	_, err := q.db.Exec(ctx, userCreate,
		arg.ID,
		arg.PasswordHash,
		arg.FirstName,
		arg.SecondName,
		arg.BirthDate,
		arg.Gender,
		arg.Biography,
		arg.City,
	)
	return err
}

const userGetByID = `-- name: UserGetByID :one
select id, password_hash, first_name, second_name, birth_date, gender, biography, city, created_at, updated_at from "user"
where id = $1
`

func (q *Queries) UserGetByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, userGetByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.FirstName,
		&i.SecondName,
		&i.BirthDate,
		&i.Gender,
		&i.Biography,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userTokenCreate = `-- name: UserTokenCreate :one
insert into user_token(user_id, token, expires_at)
values ($1, $2, $3)
returning id
`

type UserTokenCreateParams struct {
	UserID    uuid.UUID
	Token     string
	ExpiresAt pgtype.Timestamptz
}

func (q *Queries) UserTokenCreate(ctx context.Context, arg UserTokenCreateParams) (int64, error) {
	row := q.db.QueryRow(ctx, userTokenCreate, arg.UserID, arg.Token, arg.ExpiresAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const userTokenDeleteByUserID = `-- name: UserTokenDeleteByUserID :exec
delete from user_token
where user_id = $1
`

func (q *Queries) UserTokenDeleteByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, userTokenDeleteByUserID, userID)
	return err
}
