// Code generated by gowrap. DO NOT EDIT.
// template: ../../../postgresql/dbtx.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package pg

//go:generate gowrap gen -p github.com/shaelmaar/otus-highload/social-network/internal/queries/pg -i Querier -t ../../../postgresql/dbtx.tmpl -o querier_tx.go -l ""

import (
	"context"
	"sync"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

type QuerierTX interface {
	Querier
	WithTx(tx pgx.Tx) QuerierTX
}

type txMutex struct {
	sync.Mutex

	inTx bool
}

func (mx *txMutex) Lock() {
	if mx.inTx {
		mx.Mutex.Lock()
	}
}

func (mx *txMutex) Unlock() {
	if mx.inTx {
		mx.Mutex.Unlock()
	}
}

type QueriesTX struct {
	base *Queries
	mx   txMutex
	inTx bool
}

func NewQueriesTX(base *Queries) *QueriesTX {
	return &QueriesTX{base: base, mx: txMutex{Mutex: sync.Mutex{}, inTx: false}}
}

func (s *QueriesTX) WithTx(tx pgx.Tx) QuerierTX {
	if s.mx.inTx {
		return s
	}

	return &QueriesTX{
		base: s.base.WithTx(tx),
		mx:   txMutex{Mutex: sync.Mutex{}, inTx: true},
	}
}

func (_d *QueriesTX) UserCreate(ctx context.Context, arg UserCreateParams) (err error) {
	_d.mx.Lock()
	defer _d.mx.Unlock()
	return _d.base.UserCreate(ctx, arg)
}

func (_d *QueriesTX) UserGetByID(ctx context.Context, id uuid.UUID) (u1 User, err error) {
	_d.mx.Lock()
	defer _d.mx.Unlock()
	return _d.base.UserGetByID(ctx, id)
}

func (_d *QueriesTX) UserTokenCreate(ctx context.Context, arg UserTokenCreateParams) (i1 int64, err error) {
	_d.mx.Lock()
	defer _d.mx.Unlock()
	return _d.base.UserTokenCreate(ctx, arg)
}

func (_d *QueriesTX) UserTokenDeleteByUserID(ctx context.Context, userID uuid.UUID) (err error) {
	_d.mx.Lock()
	defer _d.mx.Unlock()
	return _d.base.UserTokenDeleteByUserID(ctx, userID)
}
