// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: friend.sql

package pg

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const friendCrete = `-- name: FriendCrete :exec
insert into friend(user_id, friend_id, created_at)
values ($1, $2, $3)
on conflict (user_id, friend_id) do nothing
`

type FriendCreteParams struct {
	UserID    uuid.UUID
	FriendID  uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) FriendCrete(ctx context.Context, arg FriendCreteParams) error {
	_, err := q.db.Exec(ctx, friendCrete, arg.UserID, arg.FriendID, arg.CreatedAt)
	return err
}

const friendDelete = `-- name: FriendDelete :exec
delete
from friend
where user_id = $1 and friend_id = $2
`

type FriendDeleteParams struct {
	UserID   uuid.UUID
	FriendID uuid.UUID
}

func (q *Queries) FriendDelete(ctx context.Context, arg FriendDeleteParams) error {
	_, err := q.db.Exec(ctx, friendDelete, arg.UserID, arg.FriendID)
	return err
}

const friendIDsByUserID = `-- name: FriendIDsByUserID :many
select friend_id
from friend
where user_id = $1
`

func (q *Queries) FriendIDsByUserID(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, friendIDsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var friend_id uuid.UUID
		if err := rows.Scan(&friend_id); err != nil {
			return nil, err
		}
		items = append(items, friend_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userIDsByFriendID = `-- name: UserIDsByFriendID :many
select user_id
from friend
where friend_id = $1
`

func (q *Queries) UserIDsByFriendID(ctx context.Context, friendID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, userIDsByFriendID, friendID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var user_id uuid.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
